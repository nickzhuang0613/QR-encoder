#ifndef DEFINITION_H_INCLUDED
#define DEFINITION_H_INCLUDED
#define MAXVERSION 40
#define MAXNUM (4*MAXVERSION+10)*(4*MAXVERSION+10)+50
#define NUMBERMODE 0
#define ASCIIMODE 1
#define NUMLETTERMODE 2
#define OFNUMBER(char) *char>=48&&*char<=57
#define OFLETTER(char) (*char>=65&&*char<=90)||(*char>=97&&*char<=122)
#define TOTALLENGTH 600
#define IMAGESIZE 5 //
#define HALFIMAGESIZE (IMAGESIZE/2)
#define BMPLENGTH 650 //画布的边长
struct ecode
{
    int ecoden;
    int blockn[2];
    int CKR[2][3]; //C:码字总数 K:数据码字数 R:纠错容量（可能不用）
};
static char modeindic[3][5]={"0001","0100","0010"};//模式指示符 数字等模式
static struct ecode econfigbackup[14]=
{
    {17,{1},{{26,9,8}}},                        //1
    {28,{1},{{44,16,14}}},                      //2
    {44,{2},{{35,13,11}}},                      //3
    {64,{4},{{25,9,8}}},                        //4
    {88,{2,2},{{33,11,11},{34,12,11}}},     //5
    {112,{4},{{43,15,14}}},                      //6
    {130,{4,1},{{39,13,13},{40,14,13}}},    //7
    {156,{4,2},{{40,14,13},{41,15,13}}},    //8
    {192,{4,4},{{36,12,12},{37,13,12}}},    //9
    {224,{6,2},{{43,15,14},{44,16,14}}},    //10
    {264,{3,8},{{36,12,12},{37,13,12}}},    //11
    {308,{7,4},{{42,14,14},{43,15,14}}},    //12
    {352,{12,4},{{33,11,11},{34,12,11}}},   //13
    {384,{11,5},{{36,12,12},{37,13,12}}}    //14
};
static struct ecode econfig[40]=
{
    {17,{1},{{26,9,8}}},                        //1
    {28,{1},{{44,16,14}}},                      //2
    {44,{2},{{35,13,11}}},                      //3
    {64,{4},{{25,9,8}}},                        //4
    {88,{2,2},{{33,11,11},{34,12,11}}},     //5
    {112,{4},{{43,15,14}}},                      //6
    {130,{4,1},{{39,13,13},{40,14,13}}},    //7
    {156,{4,2},{{40,14,13},{41,15,13}}},    //8
    {192,{4,4},{{36,12,12},{37,13,12}}},    //9
    {224,{6,2},{{43,15,14},{44,16,14}}},    //10
    {264,{3,8},{{36,12,12},{37,13,12}}},    //11
    {308,{7,4},{{42,14,14},{43,15,14}}},    //12
    {352,{12,4},{{33,11,11},{34,12,11}}},   //13
    {384,{11,5},{{36,12,12},{37,13,12}}},    //14
    {432,{11,7},{{36,12,12},{37,13,12}}},    //15
    {480,{3,13},{{45,15,15},{46,16,15}}},
    {532,{2,17},{{42,14,14},{43,15,14}}},
    {588,{2,19},{{42,14,14},{43,15,14}}},
    {650,{9,16},{{39,13,13},{40,14,13}}},
    {700,{15,10},{{43,15,14},{44,16,14}}},    //20
    {750,{19,6},{{46,16,15},{47,17,15}}},
    {816,{34},{{37,13,12}}},
    {900,{16,14},{{45,15,15},{46,16,15}}},
    {960,{30,2},{{46,16,15},{47,17,15}}},
    {1050,{22,13},{{45,15,15},{46,16,15}}},   //25
    {1110,{33,4},{{46,16,15},{47,17,15}}},
    {1200,{12,28},{{45,15,15},{46,16,15}}},
    {1260,{11,31},{{45,15,15},{46,16,15}}},
    {1350,{19,26},{{45,15,15},{46,16,15}}},
    {1440,{23,25},{{45,15,15},{46,16,15}}},   //30
    {1530,{23,28},{{45,15,15},{46,16,15}}},
    {1620,{19,35},{{45,15,15},{46,16,15}}},
    {1710,{11,46},{{45,15,15},{46,16,15}}},
    {1800,{59,1},{{46,16,15},{47,17,15}}},
    {1890,{22,41},{{45,15,15},{46,16,15}}},   //35
    {1980,{2,64},{{45,15,15},{46,16,15}}},
    {2100,{24,46},{{45,15,15},{46,16,15}}},
    {2220,{42,32},{{45,15,15},{46,16,15}}},
    {2310,{10,67},{{45,15,15},{46,16,15}}},
    {2430,{20,61},{{45,15,15},{46,16,15}}}     //40
};

static char verinfobackkup[8][19]=
{
    "000111110010010100","001000010110111100",
    "001001101010011001","001010010011010011",
    "001011101111110110","001100011101100010",
    "001101100001000111","001110011000001101"
};
static char verinfo[34][19]=        //版本信息
{
    "000111110010010100","001000010110111100",
    "001001101010011001","001010010011010011",
    "001011101111110110","001100011101100010",
    "001101100001000111","001110011000001101",
    "001111100100101000","010000101101111000",
    "010001010001011101","010010101000010111",
    "010011010100110010","010100100110100110",
    "010101011010000011","010110100011001001",
    "010111011111101100","011000111011000100",
    "011001000111100001","011010111110101011",
    "011011000010001110","011100110000011010",
    "011101001100111111","011110110101110101",
    "011111001001010000","100000100111010101",
    "100001011011110000","100010100010111010", //34
    "100011011110011111","100100101100001011",
    "100101010000101110","100110101001100100",
    "100111010101000001","101000110001101001"
};
//static char formatinfo[16]="001011010001001"; //001掩膜
//static char formatinfo[16]="100110111000010"; //011掩膜 未xor
static char formatinfo[16]="001100111010000"; //011掩膜已xor
static char filler[2][9]={"11101100","00010001"};//填充位
static char* file_identifier=".txt";
typedef struct QRcode
{
    unsigned int ver;           //版本
    unsigned int length;        //边长
    unsigned int align_n;       //校正图形个数（5*5方阵）
    int align_coord[7];         //校正图形坐标
    unsigned int funcn;         //功能图形模块数
    unsigned int formatn;       //格式和版本信息模块数
    unsigned int datan;         //除去版本信息的数据模块数（包括纠错）
    unsigned int coden;         //码字总数
    unsigned int remainbit;     //剩余位
    unsigned int msgn;          //信息模块数（无纠错）
    unsigned int msgcode;       //信息码字数（无纠错）
    struct ecode ecodata;        //纠错特性
    char** p;                   //指向二进制矩阵的指针
}Qrcodeinfo;
typedef char(*CodeArray)[9];
static int AlphaTo[255]={1,2,4,8,16,32,64,128,29,58,116,232,205,135,19,38,76,152,45,90,180,117,234,201,143,3,6,12,24,48,96,192,157,39,78,156,37,74,148,53,106,212,181,119,238,193,159,35,70,140,5,10,20,40,80,160,93,186,105,210,185,111,222,161,95,190,97,194,153,47,94,188,101,202,137,15,30,60,120,240,253,231,211,187,107,214,177,127,254,225,223,163,91,182,113,226,217,175,67,134,17,34,68,136,13,26,52,104,208,189,103,206,129,31,62,124,248,237,199,147,59,118,236,197,151,51,102,204,133,23,46,92,184,109,218,169,79,158,33,66,132,21,42,84,168,77,154,41,82,164,85,170,73,146,57,114,228,213,183,115,230,209,191,99,198,145,63,126,252,229,215,179,123,246,241,255,227,219,171,75,150,49,98,196,149,55,110,220,165,87,174,65,130,25,50,100,200,141,7,14,28,56,112,224,221,167,83,166,81,162,89,178,121,242,249,239,195,155,43,86,172,69,138,9,18,36,72,144,61,122,244,245,247,243,251,235,203,139,11,22,44,88,176,125,250,233,207,131,27,54,108,216,173,71,142};
//AlphaTo[n]的值为a的n次幂 n=0,1,2,...,254
static int PowerOf[255]={0,1,25,2,50,26,198,3,223,51,238,27,104,199,75,4,100,224,14,52,141,239,129,28,193,105,248,200,8,76,113,5,138,101,47,225,36,15,33,53,147,142,218,240,18,130,69,29,181,194,125,106,39,249,185,201,154,9,120,77,228,114,166,6,191,139,98,102,221,48,253,226,152,37,179,16,145,34,136,54,208,148,206,143,150,219,189,241,210,19,92,131,56,70,64,30,66,182,163,195,72,126,110,107,58,40,84,250,133,186,61,202,94,155,159,10,21,121,43,78,212,229,172,115,243,167,87,7,112,192,247,140,128,99,13,103,74,222,237,49,197,254,24,227,165,153,119,38,184,180,124,17,68,146,217,35,32,137,46,55,63,209,91,149,188,207,205,144,135,151,178,220,252,190,97,242,86,211,171,20,42,93,158,132,60,57,83,71,109,65,162,31,45,67,216,183,123,164,118,196,23,73,236,127,12,111,246,108,161,59,82,41,157,85,170,251,96,134,177,187,204,62,90,203,89,95,176,156,169,160,81,11,245,22,235,122,117,44,215,79,174,213,233,230,231,173,232,116,214,244,234,168,80,88,175};
//PowerOf[n-1]的值是数n对应的a的幂数 n=1,2,...,255
int alphato(int n)
{
    int N=n%255;
    return AlphaTo[N];
}
int powerof(int n)
{
    return PowerOf[n-1];
}
#endif // DEFINITION_H_INCLUDED
